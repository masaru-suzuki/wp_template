{"version":3,"sources":["scripts.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","call","slice","constructor","name","from","test","arr","len","arr2","r","t","c","require","u","a","Error","code","p","exports","1","module","$","jQuery","wp","customize","bind","to","text","css","clip","position","color","siteNavigation","document","getElementById","getElementsByTagName","button","menu","contains","addEventListener","classList","toggle","getAttribute","setAttribute","event","target","links","linksWithChildren","querySelectorAll","_iterator","_step","link","_step2","_iterator2","toggleFocus","type","self","tagName","toLowerCase","isClickInside","preventDefault","menuItem","parentNode","children","_step3","remove"],"mappings":"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","file":"scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/* global wp, jQuery */\n/**\n * File customizer.js.\n *\n * Theme Customizer enhancements for a better user experience.\n *\n * Contains handlers to make Theme Customizer preview reload changes asynchronously.\n */\n\n( function( $ ) {\n\t// Site title and description.\n\twp.customize( 'blogname', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\t$( '.site-title a' ).text( to );\n\t\t} );\n\t} );\n\twp.customize( 'blogdescription', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\t$( '.site-description' ).text( to );\n\t\t} );\n\t} );\n\n\t// Header text color.\n\twp.customize( 'header_textcolor', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\tif ( 'blank' === to ) {\n\t\t\t\t$( '.site-title, .site-description' ).css( {\n\t\t\t\t\tclip: 'rect(1px, 1px, 1px, 1px)',\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t$( '.site-title, .site-description' ).css( {\n\t\t\t\t\tclip: 'auto',\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t} );\n\t\t\t\t$( '.site-title a, .site-description' ).css( {\n\t\t\t\t\tcolor: to,\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t} );\n}( jQuery ) );\n\n/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\n( function() {\n\tconst siteNavigation = document.getElementById( 'site-navigation' );\n\n\t// Return early if the navigation don't exist.\n\tif ( ! siteNavigation ) {\n\t\treturn;\n\t}\n\n\tconst button = siteNavigation.getElementsByTagName( 'button' )[ 0 ];\n\n\t// Return early if the button don't exist.\n\tif ( 'undefined' === typeof button ) {\n\t\treturn;\n\t}\n\n\tconst menu = siteNavigation.getElementsByTagName( 'ul' )[ 0 ];\n\n\t// Hide menu toggle button if menu is empty and return early.\n\tif ( 'undefined' === typeof menu ) {\n\t\tbutton.style.display = 'none';\n\t\treturn;\n\t}\n\n\tif ( ! menu.classList.contains( 'nav-menu' ) ) {\n\t\tmenu.classList.add( 'nav-menu' );\n\t}\n\n\t// Toggle the .toggled class and the aria-expanded value each time the button is clicked.\n\tbutton.addEventListener( 'click', function() {\n\t\tsiteNavigation.classList.toggle( 'toggled' );\n\n\t\tif ( button.getAttribute( 'aria-expanded' ) === 'true' ) {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t} else {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'true' );\n\t\t}\n\t} );\n\n\t// Remove the .toggled class and set aria-expanded to false when the user clicks outside the navigation.\n\tdocument.addEventListener( 'click', function( event ) {\n\t\tconst isClickInside = siteNavigation.contains( event.target );\n\n\t\tif ( ! isClickInside ) {\n\t\t\tsiteNavigation.classList.remove( 'toggled' );\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t}\n\t} );\n\n\t// Get all the link elements within the menu.\n\tconst links = menu.getElementsByTagName( 'a' );\n\n\t// Get all the link elements with children within the menu.\n\tconst linksWithChildren = menu.querySelectorAll( '.menu-item-has-children > a, .page_item_has_children > a' );\n\n\t// Toggle focus each time a menu link is focused or blurred.\n\tfor ( const link of links ) {\n\t\tlink.addEventListener( 'focus', toggleFocus, true );\n\t\tlink.addEventListener( 'blur', toggleFocus, true );\n\t}\n\n\t// Toggle focus each time a menu link with children receive a touch event.\n\tfor ( const link of linksWithChildren ) {\n\t\tlink.addEventListener( 'touchstart', toggleFocus, false );\n\t}\n\n\t/**\n\t * Sets or removes .focus class on an element.\n\t */\n\tfunction toggleFocus() {\n\t\tif ( event.type === 'focus' || event.type === 'blur' ) {\n\t\t\tlet self = this;\n\t\t\t// Move up through the ancestors of the current link until we hit .nav-menu.\n\t\t\twhile ( ! self.classList.contains( 'nav-menu' ) ) {\n\t\t\t\t// On li elements toggle the class .focus.\n\t\t\t\tif ( 'li' === self.tagName.toLowerCase() ) {\n\t\t\t\t\tself.classList.toggle( 'focus' );\n\t\t\t\t}\n\t\t\t\tself = self.parentNode;\n\t\t\t}\n\t\t}\n\n\t\tif ( event.type === 'touchstart' ) {\n\t\t\tconst menuItem = this.parentNode;\n\t\t\tevent.preventDefault();\n\t\t\tfor ( const link of menuItem.parentNode.children ) {\n\t\t\t\tif ( menuItem !== link ) {\n\t\t\t\t\tlink.classList.remove( 'focus' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tmenuItem.classList.toggle( 'focus' );\n\t\t}\n\t}\n}());\n\n(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/* global wp, jQuery */\n/**\n * File customizer.js.\n *\n * Theme Customizer enhancements for a better user experience.\n *\n * Contains handlers to make Theme Customizer preview reload changes asynchronously.\n */\n\n( function( $ ) {\n\t// Site title and description.\n\twp.customize( 'blogname', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\t$( '.site-title a' ).text( to );\n\t\t} );\n\t} );\n\twp.customize( 'blogdescription', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\t$( '.site-description' ).text( to );\n\t\t} );\n\t} );\n\n\t// Header text color.\n\twp.customize( 'header_textcolor', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\tif ( 'blank' === to ) {\n\t\t\t\t$( '.site-title, .site-description' ).css( {\n\t\t\t\t\tclip: 'rect(1px, 1px, 1px, 1px)',\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t$( '.site-title, .site-description' ).css( {\n\t\t\t\t\tclip: 'auto',\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t} );\n\t\t\t\t$( '.site-title a, .site-description' ).css( {\n\t\t\t\t\tcolor: to,\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t} );\n}( jQuery ) );\n\n/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\n( function() {\n\tconst siteNavigation = document.getElementById( 'site-navigation' );\n\n\t// Return early if the navigation don't exist.\n\tif ( ! siteNavigation ) {\n\t\treturn;\n\t}\n\n\tconst button = siteNavigation.getElementsByTagName( 'button' )[ 0 ];\n\n\t// Return early if the button don't exist.\n\tif ( 'undefined' === typeof button ) {\n\t\treturn;\n\t}\n\n\tconst menu = siteNavigation.getElementsByTagName( 'ul' )[ 0 ];\n\n\t// Hide menu toggle button if menu is empty and return early.\n\tif ( 'undefined' === typeof menu ) {\n\t\tbutton.style.display = 'none';\n\t\treturn;\n\t}\n\n\tif ( ! menu.classList.contains( 'nav-menu' ) ) {\n\t\tmenu.classList.add( 'nav-menu' );\n\t}\n\n\t// Toggle the .toggled class and the aria-expanded value each time the button is clicked.\n\tbutton.addEventListener( 'click', function() {\n\t\tsiteNavigation.classList.toggle( 'toggled' );\n\n\t\tif ( button.getAttribute( 'aria-expanded' ) === 'true' ) {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t} else {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'true' );\n\t\t}\n\t} );\n\n\t// Remove the .toggled class and set aria-expanded to false when the user clicks outside the navigation.\n\tdocument.addEventListener( 'click', function( event ) {\n\t\tconst isClickInside = siteNavigation.contains( event.target );\n\n\t\tif ( ! isClickInside ) {\n\t\t\tsiteNavigation.classList.remove( 'toggled' );\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t}\n\t} );\n\n\t// Get all the link elements within the menu.\n\tconst links = menu.getElementsByTagName( 'a' );\n\n\t// Get all the link elements with children within the menu.\n\tconst linksWithChildren = menu.querySelectorAll( '.menu-item-has-children > a, .page_item_has_children > a' );\n\n\t// Toggle focus each time a menu link is focused or blurred.\n\tfor ( const link of links ) {\n\t\tlink.addEventListener( 'focus', toggleFocus, true );\n\t\tlink.addEventListener( 'blur', toggleFocus, true );\n\t}\n\n\t// Toggle focus each time a menu link with children receive a touch event.\n\tfor ( const link of linksWithChildren ) {\n\t\tlink.addEventListener( 'touchstart', toggleFocus, false );\n\t}\n\n\t/**\n\t * Sets or removes .focus class on an element.\n\t */\n\tfunction toggleFocus() {\n\t\tif ( event.type === 'focus' || event.type === 'blur' ) {\n\t\t\tlet self = this;\n\t\t\t// Move up through the ancestors of the current link until we hit .nav-menu.\n\t\t\twhile ( ! self.classList.contains( 'nav-menu' ) ) {\n\t\t\t\t// On li elements toggle the class .focus.\n\t\t\t\tif ( 'li' === self.tagName.toLowerCase() ) {\n\t\t\t\t\tself.classList.toggle( 'focus' );\n\t\t\t\t}\n\t\t\t\tself = self.parentNode;\n\t\t\t}\n\t\t}\n\n\t\tif ( event.type === 'touchstart' ) {\n\t\t\tconst menuItem = this.parentNode;\n\t\t\tevent.preventDefault();\n\t\t\tfor ( const link of menuItem.parentNode.children ) {\n\t\t\t\tif ( menuItem !== link ) {\n\t\t\t\t\tlink.classList.remove( 'focus' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tmenuItem.classList.toggle( 'focus' );\n\t\t}\n\t}\n}());\n\n(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/* global wp, jQuery */\n/**\n * File customizer.js.\n *\n * Theme Customizer enhancements for a better user experience.\n *\n * Contains handlers to make Theme Customizer preview reload changes asynchronously.\n */\n\n( function( $ ) {\n\t// Site title and description.\n\twp.customize( 'blogname', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\t$( '.site-title a' ).text( to );\n\t\t} );\n\t} );\n\twp.customize( 'blogdescription', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\t$( '.site-description' ).text( to );\n\t\t} );\n\t} );\n\n\t// Header text color.\n\twp.customize( 'header_textcolor', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\tif ( 'blank' === to ) {\n\t\t\t\t$( '.site-title, .site-description' ).css( {\n\t\t\t\t\tclip: 'rect(1px, 1px, 1px, 1px)',\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t$( '.site-title, .site-description' ).css( {\n\t\t\t\t\tclip: 'auto',\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t} );\n\t\t\t\t$( '.site-title a, .site-description' ).css( {\n\t\t\t\t\tcolor: to,\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t} );\n}( jQuery ) );\n\n/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\n( function() {\n\tconst siteNavigation = document.getElementById( 'site-navigation' );\n\n\t// Return early if the navigation don't exist.\n\tif ( ! siteNavigation ) {\n\t\treturn;\n\t}\n\n\tconst button = siteNavigation.getElementsByTagName( 'button' )[ 0 ];\n\n\t// Return early if the button don't exist.\n\tif ( 'undefined' === typeof button ) {\n\t\treturn;\n\t}\n\n\tconst menu = siteNavigation.getElementsByTagName( 'ul' )[ 0 ];\n\n\t// Hide menu toggle button if menu is empty and return early.\n\tif ( 'undefined' === typeof menu ) {\n\t\tbutton.style.display = 'none';\n\t\treturn;\n\t}\n\n\tif ( ! menu.classList.contains( 'nav-menu' ) ) {\n\t\tmenu.classList.add( 'nav-menu' );\n\t}\n\n\t// Toggle the .toggled class and the aria-expanded value each time the button is clicked.\n\tbutton.addEventListener( 'click', function() {\n\t\tsiteNavigation.classList.toggle( 'toggled' );\n\n\t\tif ( button.getAttribute( 'aria-expanded' ) === 'true' ) {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t} else {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'true' );\n\t\t}\n\t} );\n\n\t// Remove the .toggled class and set aria-expanded to false when the user clicks outside the navigation.\n\tdocument.addEventListener( 'click', function( event ) {\n\t\tconst isClickInside = siteNavigation.contains( event.target );\n\n\t\tif ( ! isClickInside ) {\n\t\t\tsiteNavigation.classList.remove( 'toggled' );\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t}\n\t} );\n\n\t// Get all the link elements within the menu.\n\tconst links = menu.getElementsByTagName( 'a' );\n\n\t// Get all the link elements with children within the menu.\n\tconst linksWithChildren = menu.querySelectorAll( '.menu-item-has-children > a, .page_item_has_children > a' );\n\n\t// Toggle focus each time a menu link is focused or blurred.\n\tfor ( const link of links ) {\n\t\tlink.addEventListener( 'focus', toggleFocus, true );\n\t\tlink.addEventListener( 'blur', toggleFocus, true );\n\t}\n\n\t// Toggle focus each time a menu link with children receive a touch event.\n\tfor ( const link of linksWithChildren ) {\n\t\tlink.addEventListener( 'touchstart', toggleFocus, false );\n\t}\n\n\t/**\n\t * Sets or removes .focus class on an element.\n\t */\n\tfunction toggleFocus() {\n\t\tif ( event.type === 'focus' || event.type === 'blur' ) {\n\t\t\tlet self = this;\n\t\t\t// Move up through the ancestors of the current link until we hit .nav-menu.\n\t\t\twhile ( ! self.classList.contains( 'nav-menu' ) ) {\n\t\t\t\t// On li elements toggle the class .focus.\n\t\t\t\tif ( 'li' === self.tagName.toLowerCase() ) {\n\t\t\t\t\tself.classList.toggle( 'focus' );\n\t\t\t\t}\n\t\t\t\tself = self.parentNode;\n\t\t\t}\n\t\t}\n\n\t\tif ( event.type === 'touchstart' ) {\n\t\t\tconst menuItem = this.parentNode;\n\t\t\tevent.preventDefault();\n\t\t\tfor ( const link of menuItem.parentNode.children ) {\n\t\t\t\tif ( menuItem !== link ) {\n\t\t\t\t\tlink.classList.remove( 'focus' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tmenuItem.classList.toggle( 'focus' );\n\t\t}\n\t}\n}());\n\n/* global wp, jQuery */\n/**\n * File customizer.js.\n *\n * Theme Customizer enhancements for a better user experience.\n *\n * Contains handlers to make Theme Customizer preview reload changes asynchronously.\n */\n\n( function( $ ) {\n\t// Site title and description.\n\twp.customize( 'blogname', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\t$( '.site-title a' ).text( to );\n\t\t} );\n\t} );\n\twp.customize( 'blogdescription', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\t$( '.site-description' ).text( to );\n\t\t} );\n\t} );\n\n\t// Header text color.\n\twp.customize( 'header_textcolor', function( value ) {\n\t\tvalue.bind( function( to ) {\n\t\t\tif ( 'blank' === to ) {\n\t\t\t\t$( '.site-title, .site-description' ).css( {\n\t\t\t\t\tclip: 'rect(1px, 1px, 1px, 1px)',\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t$( '.site-title, .site-description' ).css( {\n\t\t\t\t\tclip: 'auto',\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t} );\n\t\t\t\t$( '.site-title a, .site-description' ).css( {\n\t\t\t\t\tcolor: to,\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t} );\n}( jQuery ) );\n\n/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\n( function() {\n\tconst siteNavigation = document.getElementById( 'site-navigation' );\n\n\t// Return early if the navigation don't exist.\n\tif ( ! siteNavigation ) {\n\t\treturn;\n\t}\n\n\tconst button = siteNavigation.getElementsByTagName( 'button' )[ 0 ];\n\n\t// Return early if the button don't exist.\n\tif ( 'undefined' === typeof button ) {\n\t\treturn;\n\t}\n\n\tconst menu = siteNavigation.getElementsByTagName( 'ul' )[ 0 ];\n\n\t// Hide menu toggle button if menu is empty and return early.\n\tif ( 'undefined' === typeof menu ) {\n\t\tbutton.style.display = 'none';\n\t\treturn;\n\t}\n\n\tif ( ! menu.classList.contains( 'nav-menu' ) ) {\n\t\tmenu.classList.add( 'nav-menu' );\n\t}\n\n\t// Toggle the .toggled class and the aria-expanded value each time the button is clicked.\n\tbutton.addEventListener( 'click', function() {\n\t\tsiteNavigation.classList.toggle( 'toggled' );\n\n\t\tif ( button.getAttribute( 'aria-expanded' ) === 'true' ) {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t} else {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'true' );\n\t\t}\n\t} );\n\n\t// Remove the .toggled class and set aria-expanded to false when the user clicks outside the navigation.\n\tdocument.addEventListener( 'click', function( event ) {\n\t\tconst isClickInside = siteNavigation.contains( event.target );\n\n\t\tif ( ! isClickInside ) {\n\t\t\tsiteNavigation.classList.remove( 'toggled' );\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t}\n\t} );\n\n\t// Get all the link elements within the menu.\n\tconst links = menu.getElementsByTagName( 'a' );\n\n\t// Get all the link elements with children within the menu.\n\tconst linksWithChildren = menu.querySelectorAll( '.menu-item-has-children > a, .page_item_has_children > a' );\n\n\t// Toggle focus each time a menu link is focused or blurred.\n\tfor ( const link of links ) {\n\t\tlink.addEventListener( 'focus', toggleFocus, true );\n\t\tlink.addEventListener( 'blur', toggleFocus, true );\n\t}\n\n\t// Toggle focus each time a menu link with children receive a touch event.\n\tfor ( const link of linksWithChildren ) {\n\t\tlink.addEventListener( 'touchstart', toggleFocus, false );\n\t}\n\n\t/**\n\t * Sets or removes .focus class on an element.\n\t */\n\tfunction toggleFocus() {\n\t\tif ( event.type === 'focus' || event.type === 'blur' ) {\n\t\t\tlet self = this;\n\t\t\t// Move up through the ancestors of the current link until we hit .nav-menu.\n\t\t\twhile ( ! self.classList.contains( 'nav-menu' ) ) {\n\t\t\t\t// On li elements toggle the class .focus.\n\t\t\t\tif ( 'li' === self.tagName.toLowerCase() ) {\n\t\t\t\t\tself.classList.toggle( 'focus' );\n\t\t\t\t}\n\t\t\t\tself = self.parentNode;\n\t\t\t}\n\t\t}\n\n\t\tif ( event.type === 'touchstart' ) {\n\t\t\tconst menuItem = this.parentNode;\n\t\t\tevent.preventDefault();\n\t\t\tfor ( const link of menuItem.parentNode.children ) {\n\t\t\t\tif ( menuItem !== link ) {\n\t\t\t\t\tlink.classList.remove( 'focus' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tmenuItem.classList.toggle( 'focus' );\n\t\t}\n\t}\n}());\n\n},{}]},{},[1]);\n\n},{}]},{},[1]);\n\n},{}]},{},[1]);\n"]}